/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TimelineFindAllResponse,
  TimelineRequest,
} from '../models/index';
import {
    TimelineFindAllResponseFromJSON,
    TimelineFindAllResponseToJSON,
    TimelineRequestFromJSON,
    TimelineRequestToJSON,
} from '../models/index';

export interface CreateTimelineRequest {
    projectId: number;
    timelineRequest: TimelineRequest;
}

export interface DeleteTimelineRequest {
    projectId: number;
    timelineId: number;
}

export interface DeleteTimelineFileRequest {
    projectId: number;
    timelineId: number;
    fileId: string;
}

export interface GetAllTimelinesByProjectIdRequest {
    projectId: number;
}

export interface UpdateTimelineRequest {
    projectId: number;
    timelineId: number;
    timelineRequest: TimelineRequest;
}

/**
 * 
 */
export class TimelineApi extends runtime.BaseAPI {

    /**
     * 연구에 타임라인 기록을 추가 생성하는 POST API
     * 연구에 타임라인 기록 생성
     */
    async createTimelineRaw(requestParameters: CreateTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createTimeline().'
            );
        }

        if (requestParameters['timelineRequest'] == null) {
            throw new runtime.RequiredError(
                'timelineRequest',
                'Required parameter "timelineRequest" was null or undefined when calling createTimeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/timelines`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimelineRequestToJSON(requestParameters['timelineRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 연구에 타임라인 기록을 추가 생성하는 POST API
     * 연구에 타임라인 기록 생성
     */
    async createTimeline(requestParameters: CreateTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createTimelineRaw(requestParameters, initOverrides);
    }

    /**
     * 연구 타임라인과 관련 첨부파일을 모두 삭제하는 DELETE API
     * 타임라인 삭제
     */
    async deleteTimelineRaw(requestParameters: DeleteTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteTimeline().'
            );
        }

        if (requestParameters['timelineId'] == null) {
            throw new runtime.RequiredError(
                'timelineId',
                'Required parameter "timelineId" was null or undefined when calling deleteTimeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/timelines/{timelineId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"timelineId"}}`, encodeURIComponent(String(requestParameters['timelineId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 연구 타임라인과 관련 첨부파일을 모두 삭제하는 DELETE API
     * 타임라인 삭제
     */
    async deleteTimeline(requestParameters: DeleteTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTimelineRaw(requestParameters, initOverrides);
    }

    /**
     * 타임라인 첨부파일을 삭제하는 DELETE API
     * 타임라인 첨부파일 삭제
     */
    async deleteTimelineFileRaw(requestParameters: DeleteTimelineFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteTimelineFile().'
            );
        }

        if (requestParameters['timelineId'] == null) {
            throw new runtime.RequiredError(
                'timelineId',
                'Required parameter "timelineId" was null or undefined when calling deleteTimelineFile().'
            );
        }

        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling deleteTimelineFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/timelines/{timelineId}/files/{fileId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"timelineId"}}`, encodeURIComponent(String(requestParameters['timelineId']))).replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 타임라인 첨부파일을 삭제하는 DELETE API
     * 타임라인 첨부파일 삭제
     */
    async deleteTimelineFile(requestParameters: DeleteTimelineFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTimelineFileRaw(requestParameters, initOverrides);
    }

    /**
     * 연구의 타임라인 기록을 전체 조회하는 GET API
     * 연구의 타임라인 기록 전체 조회
     */
    async getAllTimelinesByProjectIdRaw(requestParameters: GetAllTimelinesByProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimelineFindAllResponse>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getAllTimelinesByProjectId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/timelines`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimelineFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 연구의 타임라인 기록을 전체 조회하는 GET API
     * 연구의 타임라인 기록 전체 조회
     */
    async getAllTimelinesByProjectId(requestParameters: GetAllTimelinesByProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimelineFindAllResponse> {
        const response = await this.getAllTimelinesByProjectIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 연구 타임라인을 수정하는 PUT API
     * 타임라인 수정
     */
    async updateTimelineRaw(requestParameters: UpdateTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling updateTimeline().'
            );
        }

        if (requestParameters['timelineId'] == null) {
            throw new runtime.RequiredError(
                'timelineId',
                'Required parameter "timelineId" was null or undefined when calling updateTimeline().'
            );
        }

        if (requestParameters['timelineRequest'] == null) {
            throw new runtime.RequiredError(
                'timelineRequest',
                'Required parameter "timelineRequest" was null or undefined when calling updateTimeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/timelines/{timelineId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"timelineId"}}`, encodeURIComponent(String(requestParameters['timelineId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimelineRequestToJSON(requestParameters['timelineRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 연구 타임라인을 수정하는 PUT API
     * 타임라인 수정
     */
    async updateTimeline(requestParameters: UpdateTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTimelineRaw(requestParameters, initOverrides);
    }

}
