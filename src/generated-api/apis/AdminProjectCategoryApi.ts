/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProjectCategoryRequest,
} from '../models/index';
import {
    ProjectCategoryRequestFromJSON,
    ProjectCategoryRequestToJSON,
} from '../models/index';

export interface CreateProjectCategoryRequest {
    projectCategoryRequest: ProjectCategoryRequest;
}

export interface DeleteByIdRequest {
    categoryId: number;
}

export interface UpdateProjectCategoryRequest {
    categoryId: number;
    projectCategoryRequest: ProjectCategoryRequest;
}

/**
 * 
 */
export class AdminProjectCategoryApi extends runtime.BaseAPI {

    /**
     * 새로운 연구 분야를 추가하기 위한 POST API
     * 연구 분야 추가
     */
    async createProjectCategoryRaw(requestParameters: CreateProjectCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'projectCategoryRequest',
                'Required parameter "projectCategoryRequest" was null or undefined when calling createProjectCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/project-categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectCategoryRequestToJSON(requestParameters['projectCategoryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 새로운 연구 분야를 추가하기 위한 POST API
     * 연구 분야 추가
     */
    async createProjectCategory(requestParameters: CreateProjectCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createProjectCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * 연구 분야를 삭제하기 위한 DELETE API
     * 연구 분야 삭제
     */
    async deleteByIdRaw(requestParameters: DeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling deleteById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/project-categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 연구 분야를 삭제하기 위한 DELETE API
     * 연구 분야 삭제
     */
    async deleteById(requestParameters: DeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteByIdRaw(requestParameters, initOverrides);
    }

    /**
     * 기존 연구 분야를 수정하기 위한 PUT API
     * 연구 분야 수정
     */
    async updateProjectCategoryRaw(requestParameters: UpdateProjectCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling updateProjectCategory().'
            );
        }

        if (requestParameters['projectCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'projectCategoryRequest',
                'Required parameter "projectCategoryRequest" was null or undefined when calling updateProjectCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/project-categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectCategoryRequestToJSON(requestParameters['projectCategoryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 기존 연구 분야를 수정하기 위한 PUT API
     * 연구 분야 수정
     */
    async updateProjectCategory(requestParameters: UpdateProjectCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProjectCategoryRaw(requestParameters, initOverrides);
    }

}
