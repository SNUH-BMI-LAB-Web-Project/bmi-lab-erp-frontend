/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  FindPasswordEmailRequest,
  SearchUserResponse,
  UpdateUserPasswordRequest,
  UpdateUserRequest,
  UserDetail,
  UserEducationRequest,
  UserFindAllResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FindPasswordEmailRequestFromJSON,
    FindPasswordEmailRequestToJSON,
    SearchUserResponseFromJSON,
    SearchUserResponseToJSON,
    UpdateUserPasswordRequestFromJSON,
    UpdateUserPasswordRequestToJSON,
    UpdateUserRequestFromJSON,
    UpdateUserRequestToJSON,
    UserDetailFromJSON,
    UserDetailToJSON,
    UserEducationRequestFromJSON,
    UserEducationRequestToJSON,
    UserFindAllResponseFromJSON,
    UserFindAllResponseToJSON,
} from '../models/index';

export interface AddEducationsRequest {
    userEducationRequest: UserEducationRequest;
}

export interface DeleteEducationsRequest {
    educationId: number;
}

export interface GetAllUsersRequest {
    page?: number;
    size?: number;
    criteria?: string;
}

export interface SearchUsersRequest {
    filterBy?: string;
    filterValue?: string;
    sort?: string;
}

export interface SendFindPasswordEmailRequest {
    findPasswordEmailRequest: FindPasswordEmailRequest;
}

export interface UpdateCurrentUserRequest {
    request: UpdateUserRequest;
    profileImage?: Blob;
}

export interface UpdatePasswordRequest {
    updateUserPasswordRequest: UpdateUserPasswordRequest;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * 사용자의 학력을 추가하기 위한 PATCH API
     * 사용자 학력 추가
     */
    async addEducationsRaw(requestParameters: AddEducationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userEducationRequest'] == null) {
            throw new runtime.RequiredError(
                'userEducationRequest',
                'Required parameter "userEducationRequest" was null or undefined when calling addEducations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/educations`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserEducationRequestToJSON(requestParameters['userEducationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 사용자의 학력을 추가하기 위한 PATCH API
     * 사용자 학력 추가
     */
    async addEducations(requestParameters: AddEducationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addEducationsRaw(requestParameters, initOverrides);
    }

    /**
     * 사용자의 학력을 삭제하는 DELETE API
     * 사용자 학력 삭제
     */
    async deleteEducationsRaw(requestParameters: DeleteEducationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['educationId'] == null) {
            throw new runtime.RequiredError(
                'educationId',
                'Required parameter "educationId" was null or undefined when calling deleteEducations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/educations/{educationId}`.replace(`{${"educationId"}}`, encodeURIComponent(String(requestParameters['educationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 사용자의 학력을 삭제하는 DELETE API
     * 사용자 학력 삭제
     */
    async deleteEducations(requestParameters: DeleteEducationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEducationsRaw(requestParameters, initOverrides);
    }

    /**
     * 전체 사용자 정보를 조회하는 GET API
     * 전체 사용자 정보 조회
     */
    async getAllUsersRaw(requestParameters: GetAllUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFindAllResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['criteria'] != null) {
            queryParameters['criteria'] = requestParameters['criteria'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 전체 사용자 정보를 조회하는 GET API
     * 전체 사용자 정보 조회
     */
    async getAllUsers(requestParameters: GetAllUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFindAllResponse> {
        const response = await this.getAllUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 현재 로그인한 사용자 정보를 상세 조회하는 GET API
     * 현재 사용자 정보 상세 조회
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetail>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailFromJSON(jsonValue));
    }

    /**
     * 현재 로그인한 사용자 정보를 상세 조회하는 GET API
     * 현재 사용자 정보 상세 조회
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetail> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * 사용자 검색을 위한 조회용 GET API
     * 사용자 검색
     */
    async searchUsersRaw(requestParameters: SearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchUserResponse>> {
        const queryParameters: any = {};

        if (requestParameters['filterBy'] != null) {
            queryParameters['filterBy'] = requestParameters['filterBy'];
        }

        if (requestParameters['filterValue'] != null) {
            queryParameters['filterValue'] = requestParameters['filterValue'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchUserResponseFromJSON(jsonValue));
    }

    /**
     * 사용자 검색을 위한 조회용 GET API
     * 사용자 검색
     */
    async searchUsers(requestParameters: SearchUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchUserResponse> {
        const response = await this.searchUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async sendFindPasswordEmailRaw(requestParameters: SendFindPasswordEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['findPasswordEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'findPasswordEmailRequest',
                'Required parameter "findPasswordEmailRequest" was null or undefined when calling sendFindPasswordEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/password`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FindPasswordEmailRequestToJSON(requestParameters['findPasswordEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sendFindPasswordEmail(requestParameters: SendFindPasswordEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendFindPasswordEmailRaw(requestParameters, initOverrides);
    }

    /**
     * 현재 로그인한 사용자 정보를 수정하는 PUT API
     * 현재 사용자 정보 수정
     */
    async updateCurrentUserRaw(requestParameters: UpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling updateCurrentUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['profileImage'] != null) {
            formParams.append('profileImage', requestParameters['profileImage'] as any);
        }

        if (requestParameters['request'] != null) {
            formParams.append('request', new Blob([JSON.stringify(UpdateUserRequestToJSON(requestParameters['request']))], { type: "application/json", }));
                    }

        const response = await this.request({
            path: `/users/me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 현재 로그인한 사용자 정보를 수정하는 PUT API
     * 현재 사용자 정보 수정
     */
    async updateCurrentUser(requestParameters: UpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCurrentUserRaw(requestParameters, initOverrides);
    }

    /**
     * 현재 로그인한 사용자의 비밀번호를 변경하는 PATCH API
     * 비밀번호 변경
     */
    async updatePasswordRaw(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateUserPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'updateUserPasswordRequest',
                'Required parameter "updateUserPasswordRequest" was null or undefined when calling updatePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/me/password`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserPasswordRequestToJSON(requestParameters['updateUserPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 현재 로그인한 사용자의 비밀번호를 변경하는 PATCH API
     * 비밀번호 변경
     */
    async updatePassword(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePasswordRaw(requestParameters, initOverrides);
    }

}
