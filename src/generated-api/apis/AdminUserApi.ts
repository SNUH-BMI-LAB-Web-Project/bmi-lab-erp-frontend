/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminUpdateUserRequest,
  ErrorResponse,
  RegisterUserRequest,
  UserAccountEmailRequest,
  UserDetail,
} from '../models/index';
import {
    AdminUpdateUserRequestFromJSON,
    AdminUpdateUserRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    RegisterUserRequestFromJSON,
    RegisterUserRequestToJSON,
    UserAccountEmailRequestFromJSON,
    UserAccountEmailRequestToJSON,
    UserDetailFromJSON,
    UserDetailToJSON,
} from '../models/index';

export interface DeleteUserByIdRequest {
    userId: number;
}

export interface GetUserByIdRequest {
    userId: number;
}

export interface RegisterNewUserRequest {
    registerUserRequest: RegisterUserRequest;
}

export interface SendAccountEmailRequest {
    userId: number;
    userAccountEmailRequest: UserAccountEmailRequest;
}

export interface UpdateUserByIdRequest {
    userId: number;
    adminUpdateUserRequest: AdminUpdateUserRequest;
}

/**
 * 
 */
export class AdminUserApi extends runtime.BaseAPI {

    /**
     * ID로 사용자를 삭제하는 DELETE API
     * 사용자 삭제
     */
    async deleteUserByIdRaw(requestParameters: DeleteUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ID로 사용자를 삭제하는 DELETE API
     * 사용자 삭제
     */
    async deleteUserById(requestParameters: DeleteUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserByIdRaw(requestParameters, initOverrides);
    }

    /**
     * ID로 사용자 정보를 상세 조회하는 GET API
     * 사용자 정보 상세 조회
     */
    async getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetail>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailFromJSON(jsonValue));
    }

    /**
     * ID로 사용자 정보를 상세 조회하는 GET API
     * 사용자 정보 상세 조회
     */
    async getUserById(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetail> {
        const response = await this.getUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 신규 사용자를 등록하는 POST API
     * 신규 사용자 등록
     */
    async registerNewUserRaw(requestParameters: RegisterNewUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['registerUserRequest'] == null) {
            throw new runtime.RequiredError(
                'registerUserRequest',
                'Required parameter "registerUserRequest" was null or undefined when calling registerNewUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserRequestToJSON(requestParameters['registerUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 신규 사용자를 등록하는 POST API
     * 신규 사용자 등록
     */
    async registerNewUser(requestParameters: RegisterNewUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerNewUserRaw(requestParameters, initOverrides);
    }

    /**
     * 사용자에게 계정 생성 알림 이메일을 보내는 POST API
     * 사용자 계정 생성 이메일 보내기
     */
    async sendAccountEmailRaw(requestParameters: SendAccountEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling sendAccountEmail().'
            );
        }

        if (requestParameters['userAccountEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'userAccountEmailRequest',
                'Required parameter "userAccountEmailRequest" was null or undefined when calling sendAccountEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/users/{userId}/account-email`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserAccountEmailRequestToJSON(requestParameters['userAccountEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 사용자에게 계정 생성 알림 이메일을 보내는 POST API
     * 사용자 계정 생성 이메일 보내기
     */
    async sendAccountEmail(requestParameters: SendAccountEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendAccountEmailRaw(requestParameters, initOverrides);
    }

    /**
     * ID로 사용자 비고 메시지와 휴가 수를 수정하는 PATCH API
     * 사용자 정보 수정
     */
    async updateUserByIdRaw(requestParameters: UpdateUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUserById().'
            );
        }

        if (requestParameters['adminUpdateUserRequest'] == null) {
            throw new runtime.RequiredError(
                'adminUpdateUserRequest',
                'Required parameter "adminUpdateUserRequest" was null or undefined when calling updateUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AdminUpdateUserRequestToJSON(requestParameters['adminUpdateUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ID로 사용자 비고 메시지와 휴가 수를 수정하는 PATCH API
     * 사용자 정보 수정
     */
    async updateUserById(requestParameters: UpdateUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserByIdRaw(requestParameters, initOverrides);
    }

}
