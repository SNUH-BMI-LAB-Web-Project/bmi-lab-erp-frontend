/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ProjectCompleteRequest,
  ProjectDetail,
  ProjectFileFindAllResponse,
  ProjectFindAllResponse,
  ProjectRequest,
  ReportFindAllResponse,
  SearchProjectResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ProjectCompleteRequestFromJSON,
    ProjectCompleteRequestToJSON,
    ProjectDetailFromJSON,
    ProjectDetailToJSON,
    ProjectFileFindAllResponseFromJSON,
    ProjectFileFindAllResponseToJSON,
    ProjectFindAllResponseFromJSON,
    ProjectFindAllResponseToJSON,
    ProjectRequestFromJSON,
    ProjectRequestToJSON,
    ReportFindAllResponseFromJSON,
    ReportFindAllResponseToJSON,
    SearchProjectResponseFromJSON,
    SearchProjectResponseToJSON,
} from '../models/index';

export interface CompleteProjectRequest {
    projectId: number;
    projectCompleteRequest: ProjectCompleteRequest;
}

export interface CreateNewProjectRequest {
    projectRequest: ProjectRequest;
}

export interface DeleteProjectByIdRequest {
    projectId: number;
}

export interface DeleteProjectFileRequest {
    projectId: number;
    fileId: string;
}

export interface GetAllProjectFilesRequest {
    projectId: number;
}

export interface GetAllProjectsRequest {
    search?: string;
    leaderId?: number;
    categoryId?: number;
    status?: GetAllProjectsStatusEnum;
    pi?: string;
    practicalProfessor?: string;
    page?: any;
    size?: any;
    sort?: Array<any>;
}

export interface GetProjectByIdRequest {
    projectId: number;
}

export interface GetReportsByProjectRequest {
    projectId: number;
    userId?: number;
    startDate?: Date;
    endDate?: Date;
}

export interface SearchProjectRequest {
    all?: boolean;
    keyword?: string;
}

export interface UpdateProjectRequest {
    projectId: number;
    projectRequest: ProjectRequest;
}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     * 연구 상태를 종료로 처리하는 PATCH API
     * 연구 종료 처리
     */
    async completeProjectRaw(requestParameters: CompleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling completeProject().'
            );
        }

        if (requestParameters['projectCompleteRequest'] == null) {
            throw new runtime.RequiredError(
                'projectCompleteRequest',
                'Required parameter "projectCompleteRequest" was null or undefined when calling completeProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/complete`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectCompleteRequestToJSON(requestParameters['projectCompleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 연구 상태를 종료로 처리하는 PATCH API
     * 연구 종료 처리
     */
    async completeProject(requestParameters: CompleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.completeProjectRaw(requestParameters, initOverrides);
    }

    /**
     * 신규 연구 데이터를 생성하는 POST API
     * 신규 연구 생성
     */
    async createNewProjectRaw(requestParameters: CreateNewProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectRequest'] == null) {
            throw new runtime.RequiredError(
                'projectRequest',
                'Required parameter "projectRequest" was null or undefined when calling createNewProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectRequestToJSON(requestParameters['projectRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 신규 연구 데이터를 생성하는 POST API
     * 신규 연구 생성
     */
    async createNewProject(requestParameters: CreateNewProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createNewProjectRaw(requestParameters, initOverrides);
    }

    /**
     * 연구 삭제하는 DELETE API
     * 연구 삭제
     */
    async deleteProjectByIdRaw(requestParameters: DeleteProjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProjectById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 연구 삭제하는 DELETE API
     * 연구 삭제
     */
    async deleteProjectById(requestParameters: DeleteProjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectByIdRaw(requestParameters, initOverrides);
    }

    /**
     * 연구 데이터에서 첨부파일을 삭제하는 DELETE API
     * 연구 첨부파일 삭제
     */
    async deleteProjectFileRaw(requestParameters: DeleteProjectFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProjectFile().'
            );
        }

        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling deleteProjectFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/files/{fileId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 연구 데이터에서 첨부파일을 삭제하는 DELETE API
     * 연구 첨부파일 삭제
     */
    async deleteProjectFile(requestParameters: DeleteProjectFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectFileRaw(requestParameters, initOverrides);
    }

    /**
     * 연구 자료실을 위한 첨부파일 목록을 조회하는 GET API
     * 연구 자료실 첨부파일 조회
     */
    async getAllProjectFilesRaw(requestParameters: GetAllProjectFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectFileFindAllResponse>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getAllProjectFiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/files`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFileFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 연구 자료실을 위한 첨부파일 목록을 조회하는 GET API
     * 연구 자료실 첨부파일 조회
     */
    async getAllProjectFiles(requestParameters: GetAllProjectFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectFileFindAllResponse> {
        const response = await this.getAllProjectFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모든 연구를 조회하는 GET API
     * 모든 연구 조회
     */
    async getAllProjectsRaw(requestParameters: GetAllProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectFindAllResponse>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['leaderId'] != null) {
            queryParameters['leaderId'] = requestParameters['leaderId'];
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['categoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['pi'] != null) {
            queryParameters['pi'] = requestParameters['pi'];
        }

        if (requestParameters['practicalProfessor'] != null) {
            queryParameters['practicalProfessor'] = requestParameters['practicalProfessor'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 모든 연구를 조회하는 GET API
     * 모든 연구 조회
     */
    async getAllProjects(requestParameters: GetAllProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectFindAllResponse> {
        const response = await this.getAllProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ID로 연구를 상세 조회하는 GET API
     * 연구 상세 조회
     */
    async getProjectByIdRaw(requestParameters: GetProjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDetail>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDetailFromJSON(jsonValue));
    }

    /**
     * ID로 연구를 상세 조회하는 GET API
     * 연구 상세 조회
     */
    async getProjectById(requestParameters: GetProjectByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDetail> {
        const response = await this.getProjectByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 연구와 연관된 일일보고 목록을 조회하는 GET API
     * 연구와 연관된 일일보고 목록 조회
     */
    async getReportsByProjectRaw(requestParameters: GetReportsByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportFindAllResponse>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getReportsByProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}/reports`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 연구와 연관된 일일보고 목록을 조회하는 GET API
     * 연구와 연관된 일일보고 목록 조회
     */
    async getReportsByProject(requestParameters: GetReportsByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportFindAllResponse> {
        const response = await this.getReportsByProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 연구 이름으로 목록을 간단하게 검색하는 GET API
     * 연구 검색
     */
    async searchProjectRaw(requestParameters: SearchProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchProjectResponse>> {
        const queryParameters: any = {};

        if (requestParameters['all'] != null) {
            queryParameters['all'] = requestParameters['all'];
        }

        if (requestParameters['keyword'] != null) {
            queryParameters['keyword'] = requestParameters['keyword'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchProjectResponseFromJSON(jsonValue));
    }

    /**
     * 연구 이름으로 목록을 간단하게 검색하는 GET API
     * 연구 검색
     */
    async searchProject(requestParameters: SearchProjectRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchProjectResponse> {
        const response = await this.searchProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 연구 정보를 수정하는 PUT API
     * 연구 수정
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling updateProject().'
            );
        }

        if (requestParameters['projectRequest'] == null) {
            throw new runtime.RequiredError(
                'projectRequest',
                'Required parameter "projectRequest" was null or undefined when calling updateProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectRequestToJSON(requestParameters['projectRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 연구 정보를 수정하는 PUT API
     * 연구 수정
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProjectRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetAllProjectsStatusEnum = {
    Pending: 'PENDING',
    InProgress: 'IN_PROGRESS',
    Completed: 'COMPLETED',
    Waiting: 'WAITING'
} as const;
export type GetAllProjectsStatusEnum = typeof GetAllProjectsStatusEnum[keyof typeof GetAllProjectsStatusEnum];
