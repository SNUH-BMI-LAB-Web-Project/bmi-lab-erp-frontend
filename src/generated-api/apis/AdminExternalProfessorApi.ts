/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ExternalProfessorFindAllResponse,
  ExternalProfessorRequest,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExternalProfessorFindAllResponseFromJSON,
    ExternalProfessorFindAllResponseToJSON,
    ExternalProfessorRequestFromJSON,
    ExternalProfessorRequestToJSON,
} from '../models/index';

export interface CreateExternalProfessorRequest {
    externalProfessorRequest: ExternalProfessorRequest;
}

export interface DeleteExternalProfessorRequest {
    professorId: number;
}

export interface UpdateExternalProfessorRequest {
    professorId: number;
    externalProfessorRequest: ExternalProfessorRequest;
}

/**
 * 
 */
export class AdminExternalProfessorApi extends runtime.BaseAPI {

    /**
     * 외부 교수 정보를 등록하는 POST API
     * 외부 교수 등록
     */
    async createExternalProfessorRaw(requestParameters: CreateExternalProfessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['externalProfessorRequest'] == null) {
            throw new runtime.RequiredError(
                'externalProfessorRequest',
                'Required parameter "externalProfessorRequest" was null or undefined when calling createExternalProfessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/projects/external-professors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExternalProfessorRequestToJSON(requestParameters['externalProfessorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 외부 교수 정보를 등록하는 POST API
     * 외부 교수 등록
     */
    async createExternalProfessor(requestParameters: CreateExternalProfessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createExternalProfessorRaw(requestParameters, initOverrides);
    }

    /**
     * 외부 교수 정보를 삭제하는 DELETE API
     * 외부 교수 삭제
     */
    async deleteExternalProfessorRaw(requestParameters: DeleteExternalProfessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['professorId'] == null) {
            throw new runtime.RequiredError(
                'professorId',
                'Required parameter "professorId" was null or undefined when calling deleteExternalProfessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/projects/external-professors/{professorId}`.replace(`{${"professorId"}}`, encodeURIComponent(String(requestParameters['professorId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 외부 교수 정보를 삭제하는 DELETE API
     * 외부 교수 삭제
     */
    async deleteExternalProfessor(requestParameters: DeleteExternalProfessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExternalProfessorRaw(requestParameters, initOverrides);
    }

    /**
     * 등록된 외부 교수 목록을 조회하는 GET API
     * 외부 교수 목록 조회
     */
    async getAllExternalProfessorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExternalProfessorFindAllResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/projects/external-professors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExternalProfessorFindAllResponseFromJSON(jsonValue));
    }

    /**
     * 등록된 외부 교수 목록을 조회하는 GET API
     * 외부 교수 목록 조회
     */
    async getAllExternalProfessors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExternalProfessorFindAllResponse> {
        const response = await this.getAllExternalProfessorsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 외부 교수 정보를 수정하는 PUT API
     * 외부 교수 수정
     */
    async updateExternalProfessorRaw(requestParameters: UpdateExternalProfessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['professorId'] == null) {
            throw new runtime.RequiredError(
                'professorId',
                'Required parameter "professorId" was null or undefined when calling updateExternalProfessor().'
            );
        }

        if (requestParameters['externalProfessorRequest'] == null) {
            throw new runtime.RequiredError(
                'externalProfessorRequest',
                'Required parameter "externalProfessorRequest" was null or undefined when calling updateExternalProfessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/projects/external-professors/{professorId}`.replace(`{${"professorId"}}`, encodeURIComponent(String(requestParameters['professorId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExternalProfessorRequestToJSON(requestParameters['externalProfessorRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 외부 교수 정보를 수정하는 PUT API
     * 외부 교수 수정
     */
    async updateExternalProfessor(requestParameters: UpdateExternalProfessorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateExternalProfessorRaw(requestParameters, initOverrides);
    }

}
