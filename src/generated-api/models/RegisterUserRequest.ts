/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RegisterUserRequest
 */
export interface RegisterUserRequest {
    /**
     * 사용자 이름
     * @type {string}
     * @memberof RegisterUserRequest
     */
    name?: string;
    /**
     * 이메일 주소
     * @type {string}
     * @memberof RegisterUserRequest
     */
    email?: string;
    /**
     * 비밀번호
     * @type {string}
     * @memberof RegisterUserRequest
     */
    password?: string;
    /**
     * 기관
     * @type {string}
     * @memberof RegisterUserRequest
     */
    organization?: string;
    /**
     * 부서
     * @type {string}
     * @memberof RegisterUserRequest
     */
    department?: string;
    /**
     * 소속 (있으면)
     * @type {string}
     * @memberof RegisterUserRequest
     */
    affiliation?: string;
    /**
     * 총 연차 개수
     * @type {number}
     * @memberof RegisterUserRequest
     */
    annualLeaveCount?: number;
    /**
     * 이미 사용한 연차 개수
     * @type {number}
     * @memberof RegisterUserRequest
     */
    usedLeaveCount?: number;
    /**
     * 연구 분야 목록
     * @type {Array<string>}
     * @memberof RegisterUserRequest
     */
    categories?: Array<RegisterUserRequestCategoriesEnum>;
    /**
     * 좌석 번호
     * @type {string}
     * @memberof RegisterUserRequest
     */
    seatNumber?: string;
    /**
     * 전화번호
     * @type {string}
     * @memberof RegisterUserRequest
     */
    phoneNumber?: string;
    /**
     * 학력
     * @type {string}
     * @memberof RegisterUserRequest
     */
    education?: string;
    /**
     * 입사일
     * @type {Date}
     * @memberof RegisterUserRequest
     */
    joinedAt?: Date;
}


/**
 * @export
 */
export const RegisterUserRequestCategoriesEnum = {
    Bioinformatics: 'BIOINFORMATICS',
    AiPathology: 'AI_PATHOLOGY',
    AiSignalData: 'AI_SIGNAL_DATA',
    BigData: 'BIG_DATA',
    Nlp: 'NLP'
} as const;
export type RegisterUserRequestCategoriesEnum = typeof RegisterUserRequestCategoriesEnum[keyof typeof RegisterUserRequestCategoriesEnum];


/**
 * Check if a given object implements the RegisterUserRequest interface.
 */
export function instanceOfRegisterUserRequest(value: object): value is RegisterUserRequest {
    return true;
}

export function RegisterUserRequestFromJSON(json: any): RegisterUserRequest {
    return RegisterUserRequestFromJSONTyped(json, false);
}

export function RegisterUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegisterUserRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'email': json['email'] == null ? undefined : json['email'],
        'password': json['password'] == null ? undefined : json['password'],
        'organization': json['organization'] == null ? undefined : json['organization'],
        'department': json['department'] == null ? undefined : json['department'],
        'affiliation': json['affiliation'] == null ? undefined : json['affiliation'],
        'annualLeaveCount': json['annualLeaveCount'] == null ? undefined : json['annualLeaveCount'],
        'usedLeaveCount': json['usedLeaveCount'] == null ? undefined : json['usedLeaveCount'],
        'categories': json['categories'] == null ? undefined : json['categories'],
        'seatNumber': json['seatNumber'] == null ? undefined : json['seatNumber'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'education': json['education'] == null ? undefined : json['education'],
        'joinedAt': json['joinedAt'] == null ? undefined : (new Date(json['joinedAt'])),
    };
}

export function RegisterUserRequestToJSON(json: any): RegisterUserRequest {
    return RegisterUserRequestToJSONTyped(json, false);
}

export function RegisterUserRequestToJSONTyped(value?: RegisterUserRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'email': value['email'],
        'password': value['password'],
        'organization': value['organization'],
        'department': value['department'],
        'affiliation': value['affiliation'],
        'annualLeaveCount': value['annualLeaveCount'],
        'usedLeaveCount': value['usedLeaveCount'],
        'categories': value['categories'],
        'seatNumber': value['seatNumber'],
        'phoneNumber': value['phoneNumber'],
        'education': value['education'],
        'joinedAt': value['joinedAt'] == null ? undefined : ((value['joinedAt']).toISOString().substring(0,10)),
    };
}

