/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
    UserSummaryToJSONTyped,
} from './UserSummary';

/**
 * 
 * @export
 * @interface ProjectSummary
 */
export interface ProjectSummary {
    /**
     * 연구 ID
     * @type {number}
     * @memberof ProjectSummary
     */
    projectId?: number;
    /**
     * 연구 제목
     * @type {string}
     * @memberof ProjectSummary
     */
    title?: string;
    /**
     * 연구 분야
     * @type {string}
     * @memberof ProjectSummary
     */
    category?: ProjectSummaryCategoryEnum;
    /**
     * 연구 시작일
     * @type {Date}
     * @memberof ProjectSummary
     */
    startDate?: Date;
    /**
     * 연구 종료일
     * @type {Date}
     * @memberof ProjectSummary
     */
    endDate?: Date;
    /**
     * PI
     * @type {string}
     * @memberof ProjectSummary
     */
    pi?: string;
    /**
     * 실무 교수
     * @type {string}
     * @memberof ProjectSummary
     */
    practicalProfessor?: string;
    /**
     * 연구 책임자 목록
     * @type {Array<UserSummary>}
     * @memberof ProjectSummary
     */
    leaders?: Array<UserSummary>;
    /**
     * 연구 참여자 수
     * @type {number}
     * @memberof ProjectSummary
     */
    participantCount?: number;
    /**
     * 연구 상태
     * @type {string}
     * @memberof ProjectSummary
     */
    status?: ProjectSummaryStatusEnum;
}


/**
 * @export
 */
export const ProjectSummaryCategoryEnum = {
    Bioinformatics: 'BIOINFORMATICS',
    AiPathology: 'AI_PATHOLOGY',
    AiSignalData: 'AI_SIGNAL_DATA',
    BigData: 'BIG_DATA',
    Nlp: 'NLP'
} as const;
export type ProjectSummaryCategoryEnum = typeof ProjectSummaryCategoryEnum[keyof typeof ProjectSummaryCategoryEnum];

/**
 * @export
 */
export const ProjectSummaryStatusEnum = {
    Pending: 'PENDING',
    InProgress: 'IN_PROGRESS',
    Completed: 'COMPLETED',
    Waiting: 'WAITING'
} as const;
export type ProjectSummaryStatusEnum = typeof ProjectSummaryStatusEnum[keyof typeof ProjectSummaryStatusEnum];


/**
 * Check if a given object implements the ProjectSummary interface.
 */
export function instanceOfProjectSummary(value: object): value is ProjectSummary {
    return true;
}

export function ProjectSummaryFromJSON(json: any): ProjectSummary {
    return ProjectSummaryFromJSONTyped(json, false);
}

export function ProjectSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'projectId': json['projectId'] == null ? undefined : json['projectId'],
        'title': json['title'] == null ? undefined : json['title'],
        'category': json['category'] == null ? undefined : json['category'],
        'startDate': json['startDate'] == null ? undefined : (new Date(json['startDate'])),
        'endDate': json['endDate'] == null ? undefined : (new Date(json['endDate'])),
        'pi': json['pi'] == null ? undefined : json['pi'],
        'practicalProfessor': json['practicalProfessor'] == null ? undefined : json['practicalProfessor'],
        'leaders': json['leaders'] == null ? undefined : ((json['leaders'] as Array<any>).map(UserSummaryFromJSON)),
        'participantCount': json['participantCount'] == null ? undefined : json['participantCount'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function ProjectSummaryToJSON(json: any): ProjectSummary {
    return ProjectSummaryToJSONTyped(json, false);
}

export function ProjectSummaryToJSONTyped(value?: ProjectSummary | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'projectId': value['projectId'],
        'title': value['title'],
        'category': value['category'],
        'startDate': value['startDate'] == null ? undefined : ((value['startDate']).toISOString().substring(0,10)),
        'endDate': value['endDate'] == null ? undefined : ((value['endDate']).toISOString().substring(0,10)),
        'pi': value['pi'],
        'practicalProfessor': value['practicalProfessor'],
        'leaders': value['leaders'] == null ? undefined : ((value['leaders'] as Array<any>).map(UserSummaryToJSON)),
        'participantCount': value['participantCount'],
        'status': value['status'],
    };
}

