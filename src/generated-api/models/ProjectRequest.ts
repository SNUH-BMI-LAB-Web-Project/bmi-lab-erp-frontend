/* tslint:disable */
/* eslint-disable */
/**
 * BMI-LAB Web API
 * BMI-LAB을 관리하기 위한 웹 서비스
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProjectRequest
 */
export interface ProjectRequest {
    /**
     * 연구 제목
     * @type {string}
     * @memberof ProjectRequest
     */
    title?: string;
    /**
     * 연구 설명
     * @type {string}
     * @memberof ProjectRequest
     */
    content?: string;
    /**
     * 연구 책임자의 사용자 ID 리스트
     * @type {Array<number>}
     * @memberof ProjectRequest
     */
    leaderIds?: Array<number>;
    /**
     * 연구 참여자의 사용자 ID 리스트
     * @type {Array<number>}
     * @memberof ProjectRequest
     */
    participantIds?: Array<number>;
    /**
     * 연구 시작일
     * @type {Date}
     * @memberof ProjectRequest
     */
    startDate?: Date;
    /**
     * 연구 종료일 (있으면)
     * @type {Date}
     * @memberof ProjectRequest
     */
    endDate?: Date;
    /**
     * PI
     * @type {string}
     * @memberof ProjectRequest
     */
    pi?: string;
    /**
     * 실무 교수
     * @type {string}
     * @memberof ProjectRequest
     */
    practicalProfessor?: string;
    /**
     * IRB 번호 (있으면)
     * @type {string}
     * @memberof ProjectRequest
     */
    irbId?: string;
    /**
     * DRB 번호 (있으면)
     * @type {string}
     * @memberof ProjectRequest
     */
    drbId?: string;
    /**
     * (새로 추가된 파일의 ID만) IRB 파일 ID 리스트
     * @type {Array<string>}
     * @memberof ProjectRequest
     */
    irbFileIds?: Array<string>;
    /**
     * (새로 추가된 파일의 ID만) DRB 파일 ID 리스트
     * @type {Array<string>}
     * @memberof ProjectRequest
     */
    drbFileIds?: Array<string>;
    /**
     * (새로 추가된 파일의 ID만) 일반 첨부파일 ID 리스트
     * @type {Array<string>}
     * @memberof ProjectRequest
     */
    fileIds?: Array<string>;
    /**
     * 대기 상태 여부
     * @type {boolean}
     * @memberof ProjectRequest
     */
    isWaiting?: boolean;
    /**
     * 연구 분야
     * @type {string}
     * @memberof ProjectRequest
     */
    category?: ProjectRequestCategoryEnum;
}


/**
 * @export
 */
export const ProjectRequestCategoryEnum = {
    Bioinformatics: 'BIOINFORMATICS',
    AiPathology: 'AI_PATHOLOGY',
    AiSignalData: 'AI_SIGNAL_DATA',
    BigData: 'BIG_DATA',
    Nlp: 'NLP'
} as const;
export type ProjectRequestCategoryEnum = typeof ProjectRequestCategoryEnum[keyof typeof ProjectRequestCategoryEnum];


/**
 * Check if a given object implements the ProjectRequest interface.
 */
export function instanceOfProjectRequest(value: object): value is ProjectRequest {
    return true;
}

export function ProjectRequestFromJSON(json: any): ProjectRequest {
    return ProjectRequestFromJSONTyped(json, false);
}

export function ProjectRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'] == null ? undefined : json['title'],
        'content': json['content'] == null ? undefined : json['content'],
        'leaderIds': json['leaderIds'] == null ? undefined : json['leaderIds'],
        'participantIds': json['participantIds'] == null ? undefined : json['participantIds'],
        'startDate': json['startDate'] == null ? undefined : (new Date(json['startDate'])),
        'endDate': json['endDate'] == null ? undefined : (new Date(json['endDate'])),
        'pi': json['pi'] == null ? undefined : json['pi'],
        'practicalProfessor': json['practicalProfessor'] == null ? undefined : json['practicalProfessor'],
        'irbId': json['irbId'] == null ? undefined : json['irbId'],
        'drbId': json['drbId'] == null ? undefined : json['drbId'],
        'irbFileIds': json['irbFileIds'] == null ? undefined : json['irbFileIds'],
        'drbFileIds': json['drbFileIds'] == null ? undefined : json['drbFileIds'],
        'fileIds': json['fileIds'] == null ? undefined : json['fileIds'],
        'isWaiting': json['isWaiting'] == null ? undefined : json['isWaiting'],
        'category': json['category'] == null ? undefined : json['category'],
    };
}

export function ProjectRequestToJSON(json: any): ProjectRequest {
    return ProjectRequestToJSONTyped(json, false);
}

export function ProjectRequestToJSONTyped(value?: ProjectRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'content': value['content'],
        'leaderIds': value['leaderIds'],
        'participantIds': value['participantIds'],
        'startDate': value['startDate'] == null ? undefined : ((value['startDate']).toISOString().substring(0,10)),
        'endDate': value['endDate'] == null ? undefined : ((value['endDate']).toISOString().substring(0,10)),
        'pi': value['pi'],
        'practicalProfessor': value['practicalProfessor'],
        'irbId': value['irbId'],
        'drbId': value['drbId'],
        'irbFileIds': value['irbFileIds'],
        'drbFileIds': value['drbFileIds'],
        'fileIds': value['fileIds'],
        'isWaiting': value['isWaiting'],
        'category': value['category'],
    };
}

